package com.konichiwalivejason.www;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;

import com.konichiwalivejason.www.OneOnOneChatActivity.CustomAdapter;

import android.content.Context;
import android.util.Log;
import android.widget.ArrayAdapter;

public class Client {

	private volatile Thread blinker;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private Socket connection;
	private String IP;
	private Context context;
	private static final int PORT = 59591;
	private boolean connected;
	private ArrayList<Chats> al;
	private CustomAdapter aa;

	public Client(Context context) {
		this.context = context;
		connected = false;
	}

	// --------------------------------------------------------------------------
	//0 = server, 1 = client
	public void conntectToServer(ArrayList<Chats> al, CustomAdapter aa) throws IOException {
		Log.i("cl", "works");
		this.al = al;
		this.aa = aa;
		ConnectingThreadClass ctc = new ConnectingThreadClass();
		ctc.start();

	}

	// --------------------------------------------------------------------------

	private void setUpStreams() throws IOException {
		Log.i("cl", "Stream setup 1");
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush();
		input = new ObjectInputStream(connection.getInputStream());
		Log.i("cl", "Stream setup 2");
	}
	// --------------------------------------------------------------------------

	class ConnectingThreadClass extends Thread implements Runnable {
		private static final int TIME_OUT = 5000;

		public ConnectingThreadClass() {
			blinker = this;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			super.run();
			boolean initialSleep = false;
			Thread thisThread = Thread.currentThread();
			while (blinker == thisThread) {
				try {
					if (initialSleep)
						Thread.sleep(TIME_OUT);

					//getting random IP
					/*
					 * MySql mysql = new MySql(context); IP = mysql.getRandomIP("1");
					 */
					Log.i("cl", "Client is attempting to connect to a random server");
					//InetAddress.getByName("127.0.0.1")
					connection = new Socket("192.168.123.136", PORT);
					
					//if socket is connected eventually
					if (connection.isConnected()) {
						Log.i("cl", "You have successfully connected with a server");
						setUpStreams();
						ReceivingThread rt = new ReceivingThread();
						rt.start();
						break;
					}
					initialSleep = true;
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Log.i("cl", "Client connection error!: " + e);
					initialSleep = true;
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					Log.i("cl", "Client connection error!: " + e);
					break;
				}
				Log.i("cl", "Client has failed to connect to a server!");
			}
		}
	}

	// --------------------------------------------------------------------------

	class ReceivingThread extends Thread implements Runnable {

		public ReceivingThread() {
			blinker = this;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			super.run();
			Thread thisThread = Thread.currentThread();

			while (blinker == thisThread) {
				try {
					StringBuffer sb = new StringBuffer();
					//sb.append(input.readLine());
					Log.i("cl", "Waiting for a new message!");
					String message = (String) input.readObject();
					al.add(new Chats(R.drawable.ic_launcher, message, 1));
					//aa.notifyDataSetChanged();

					Log.i("cl", "Successfully read server output!");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Log.i("cl", "Failed to read something!: " + e);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}

	}

	// --------------------------------------------------------------------------

	public void sendString(String msg) {
		try {
			output.writeObject(msg);
			Log.i("cl", "Successfully written a message");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			Log.i("cl", "Found Error while sending string!");
		}
	}

	// --------------------------------------------------------------------------

	protected void stopThread() {
		Thread tmp = blinker;
		blinker = null;
		if (tmp != null) {
			Log.i("cl", "Stopping client thread");
			tmp.interrupt();
			try {
				connection.close();
				input.close();
				output.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				Log.i("cl", "Failed to close socket and IO!");
			}
		}
	}

	// --------------------------------------------------------------------------

}
