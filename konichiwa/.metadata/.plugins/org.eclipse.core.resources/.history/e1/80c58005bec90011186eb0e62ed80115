package com.konichiwalivejason.www;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.Handler;
import android.util.Log;
import android.widget.Toast;

public class MySql {

	//private InputStream is;

	private Context context;
	private static final String PATH = "http://www.programmerfuel.com/dydwo8/queries/";
	//private static final String PATH = "http://192.168.123.136/";
	private static final int TIMEOUT_MILLISEC = 10000;
	private static final int SEC_LIM = 60; //refreshing time
	private static final String INSERT_NEW_DUDE = "my_query_insert_new.php";
	private static final String CHECK_ONLINE = "my_query_last_connection.php";
	private static final String UPDATE_CONNECTION = "my_query_update_connection.php";
	private static final String UPDATE_INCHAT = "my_query_update_inchat.php";
	private static final String GET_NUM_SERVER = "my_query_get_num_server_one.php";
	private static final String GET_NUM_CLIENT = "my_query_get_num_client_one.php";
	private static final String UPDATE_SERVER_OR_CLIENT = "my_query_update_server_or_client.php";
	private static final String ADMIN_CHECK = "my_query_check_admin.php";
	private static final String GET_RANDOM_IP = "my_query_get_random_person.php";
	private static final String GET_CURRENT_DUTY = "my_query_get_current_duty.php";

	public MySql(Context context) {
		this.context = context;
	}


	// --------------------------------------------------------------------------------------------------
/*
	protected boolean checkDuplicate(String IP) throws InterruptedException {
		JSONObject json = null;

		try {
			//parse json data
			json = new JSONObject();
			json.put("USER_IP", IP);
			InputStream is = requestQuery(CHECK_DUPULICATE, json);
			Log.i("sql", "dup check is: " + is);
			String sresult = this.responseToString(is);
			Log.i("sql", "dup check sresult: " + sresult);
			//check ip address pattern
			Pattern pattern = Pattern.compile("(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)");
			//parse json to string
			JSONArray jArray = new JSONArray(sresult);

			JSONObject jo = jArray.getJSONObject(0);
			String ipAddress = jo.getString("USER_IP").toString();
			//attempt matching with pattern
			Matcher matcher = pattern.matcher(ipAddress);
			boolean validated = (matcher.find() && matcher.group().equals(ipAddress));

			if (validated) {
				Log.i("sql", "the result is true!");
				return true;
			}
		} catch (Exception e) {
			//Log.i("sql", "Error found!: " + e.toString() + "\njson: " + json.toString());
			//Log.e("log_tag", "Error in http connection " + e.toString());
		}

		return false;
	}
*/
	
	// --------------------------------------------------------------------------------------------------

	public String[] getServerIp(){
		String[] info = new String[2];
		
		InputStream is = requestQuery(CHECK_DUPULICATE, null);
		
		return info;
	}
	
	
	
	// --------------------------------------------------------------------------------------------------

	private InputStream requestQuery(String FILENAME, JSONObject json) {
		InputStream is = null;
		try {
			ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
			HttpClient client = new DefaultHttpClient(setHttpParams());
			HttpPost request = new HttpPost(PATH + FILENAME);
			//request.setEntity(new ByteArrayEntity(json.toString().getBytes("UTF8")));
			if (json != null) {
				request.setEntity(new ByteArrayEntity(json.toString().getBytes("UTF8")));
				request.setHeader("json", json.toString());
			} else {
				request.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			}
			HttpResponse response = client.execute(request);
			HttpEntity entity = response.getEntity();
			// If the response does not enclose an entity, there is no need
			if (entity != null) {
				is = entity.getContent();
			}
		} catch (Throwable t) {
			Log.e("rq", "The request has failed :( = " + t.toString());
		}
		return is;
	}

	// --------------------------------------------------------------------------------------------------

	private String responseToString(InputStream is) {
		String result = "";
		try {
			//========= convert response to string ========= //
			BufferedReader reader = new BufferedReader(new InputStreamReader(is, "iso-8859-1"), 8);
			StringBuilder sb = new StringBuilder();
			String line = "";
			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}

			is.close();
			result = sb.toString();
			Log.i("s", "rsult: " + result);
		} catch (Exception e) {
			Log.i("s", "Error converting result " + e.toString());
		}
		return result;
	}

	// --------------------------------------------------------------------------------------------------

	private HttpParams setHttpParams() {
		HttpParams httpParams = new BasicHttpParams();
		HttpConnectionParams.setConnectionTimeout(httpParams, TIMEOUT_MILLISEC);
		HttpConnectionParams.setSoTimeout(httpParams, TIMEOUT_MILLISEC);
		return httpParams;
	}

	// --------------------------------------------------------------------------------------------------

}
